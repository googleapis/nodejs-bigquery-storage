// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as metastorepartitionserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubBidiStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  return sinon.stub().returns(mockStream);
}

describe('v1alpha.MetastorePartitionServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'bigquerystorage.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          metastorepartitionserviceModule.v1alpha
            .MetastorePartitionServiceClient.servicePath;
        assert.strictEqual(servicePath, 'bigquerystorage.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          metastorepartitionserviceModule.v1alpha
            .MetastorePartitionServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'bigquerystorage.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {universeDomain: 'example.com'}
        );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'bigquerystorage.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {universe_domain: 'example.com'}
        );
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'bigquerystorage.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'bigquerystorage.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
              {universeDomain: 'configured.example.com'}
            );
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'bigquerystorage.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {universe_domain: 'example.com', universeDomain: 'example.net'}
        );
      });
    });

    it('has port', () => {
      const port =
        metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient
          .port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            fallback: true,
          }
        );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.metastorePartitionServiceStub, undefined);
      await client.initialize();
      assert(client.metastorePartitionServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      assert(client.metastorePartitionServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.metastorePartitionServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('batchCreateMetastorePartitions', () => {
    it('invokes batchCreateMetastorePartitions without error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsResponse()
      );
      client.innerApiCalls.batchCreateMetastorePartitions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.batchCreateMetastorePartitions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchCreateMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateMetastorePartitions without error using callback', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsResponse()
      );
      client.innerApiCalls.batchCreateMetastorePartitions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchCreateMetastorePartitions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchCreateMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateMetastorePartitions with error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchCreateMetastorePartitions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.batchCreateMetastorePartitions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.batchCreateMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateMetastorePartitions with closed client', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.batchCreateMetastorePartitions(request),
        expectedError
      );
    });
  });

  describe('batchDeleteMetastorePartitions', () => {
    it('invokes batchDeleteMetastorePartitions without error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.batchDeleteMetastorePartitions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.batchDeleteMetastorePartitions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchDeleteMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteMetastorePartitions without error using callback', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.batchDeleteMetastorePartitions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchDeleteMetastorePartitions(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchDeleteMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteMetastorePartitions with error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchDeleteMetastorePartitions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.batchDeleteMetastorePartitions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.batchDeleteMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteMetastorePartitions with closed client', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.batchDeleteMetastorePartitions(request),
        expectedError
      );
    });
  });

  describe('batchUpdateMetastorePartitions', () => {
    it('invokes batchUpdateMetastorePartitions without error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsResponse()
      );
      client.innerApiCalls.batchUpdateMetastorePartitions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.batchUpdateMetastorePartitions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchUpdateMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateMetastorePartitions without error using callback', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsResponse()
      );
      client.innerApiCalls.batchUpdateMetastorePartitions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchUpdateMetastorePartitions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchUpdateMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateMetastorePartitions with error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchUpdateMetastorePartitions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.batchUpdateMetastorePartitions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.batchUpdateMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateMetastorePartitions with closed client', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.batchUpdateMetastorePartitions(request),
        expectedError
      );
    });
  });

  describe('listMetastorePartitions', () => {
    it('invokes listMetastorePartitions without error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse()
      );
      client.innerApiCalls.listMetastorePartitions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listMetastorePartitions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetastorePartitions without error using callback', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse()
      );
      client.innerApiCalls.listMetastorePartitions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMetastorePartitions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetastorePartitions with error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMetastorePartitions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listMetastorePartitions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listMetastorePartitions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetastorePartitions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetastorePartitions with closed client', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.listMetastorePartitions(request),
        expectedError
      );
    });
  });

  describe('streamMetastorePartitions', () => {
    it('invokes streamMetastorePartitions without error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsRequest()
      );

      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse()
      );
      client.innerApiCalls.streamMetastorePartitions =
        stubBidiStreamingCall(expectedResponse);
      const stream = client.streamMetastorePartitions();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.streamMetastorePartitions as SinonStub)
          .getCall(0)
          .calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });

    it('invokes streamMetastorePartitions with error', async () => {
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.streamMetastorePartitions = stubBidiStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.streamMetastorePartitions();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (
            response: protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse
          ) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.streamMetastorePartitions as SinonStub)
          .getCall(0)
          .calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('readStream', () => {
      const fakePath = '/rendered/path/readStream';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        session: 'sessionValue',
        stream: 'streamValue',
      };
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.readStreamPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.readStreamPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('readStreamPath', () => {
        const result = client.readStreamPath(
          'projectValue',
          'locationValue',
          'sessionValue',
          'streamValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.readStreamPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromReadStreamName', () => {
        const result = client.matchProjectFromReadStreamName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.readStreamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromReadStreamName', () => {
        const result = client.matchLocationFromReadStreamName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.readStreamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSessionFromReadStreamName', () => {
        const result = client.matchSessionFromReadStreamName(fakePath);
        assert.strictEqual(result, 'sessionValue');
        assert(
          (client.pathTemplates.readStreamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchStreamFromReadStreamName', () => {
        const result = client.matchStreamFromReadStreamName(fakePath);
        assert.strictEqual(result, 'streamValue');
        assert(
          (client.pathTemplates.readStreamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('table', () => {
      const fakePath = '/rendered/path/table';
      const expectedParameters = {
        project: 'projectValue',
        dataset: 'datasetValue',
        table: 'tableValue',
      };
      const client =
        new metastorepartitionserviceModule.v1alpha.MetastorePartitionServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.tablePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tablePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tablePath', () => {
        const result = client.tablePath(
          'projectValue',
          'datasetValue',
          'tableValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tablePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTableName', () => {
        const result = client.matchProjectFromTableName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromTableName', () => {
        const result = client.matchDatasetFromTableName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.tablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTableFromTableName', () => {
        const result = client.matchTableFromTableName(fakePath);
        assert.strictEqual(result, 'tableValue');
        assert(
          (client.pathTemplates.tablePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
