// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
} from 'google-gax';
import * as path from 'path';

import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './big_query_write_client_config.json';

const version = require('../../../package.json').version;

/**
 *  BigQuery Write API.
 *
 *  The Write API can be used to write data to BigQuery.
 * @class
 * @memberof v1alpha2
 */
export class BigQueryWriteClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _terminated = false;
  auth: gax.GoogleAuth;
  bigQueryWriteStub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BigQueryWriteClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof BigQueryWriteClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof BigQueryWriteClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    const protos = gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this._descriptors.stream = {
      appendRows: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
      'google.cloud.bigquery.storage.v1alpha2.BigQueryWrite',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.cloud.bigquery.storage.v1alpha2.BigQueryWrite.
    this.bigQueryWriteStub = gaxGrpc.createStub(
      opts.fallback
        ? (protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.storage.v1alpha2.BigQueryWrite'
          )
        : // tslint:disable-next-line no-any
          (protos as any).google.cloud.bigquery.storage.v1alpha2.BigQueryWrite,
      opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const bigQueryWriteStubMethods = [
      'createWriteStream',
      'appendRows',
      'getWriteStream',
      'finalizeWriteStream',
      'batchCommitWriteStreams',
    ];

    for (const methodName of bigQueryWriteStubMethods) {
      const innerCallPromise = this.bigQueryWriteStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'bigquerystorage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'bigquerystorage.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigquery',
      'https://www.googleapis.com/auth/bigquery.insertdata',
      'https://www.googleapis.com/auth/cloud-platform',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a write stream to the given table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Reference to the table to which the stream belongs, in the format
   *   of `projects/{project_id}/datasets/{dataset_id}/tables/{table_id}`.
   * @param {google.cloud.bigquery.storage.v1alpha2.WriteStream} request.writeStream
   *   Required. Stream to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [WriteStream]{@link google.cloud.bigquery.storage.v1alpha2.WriteStream}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
          | protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.ICreateWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createWriteStream(request, options, callback);
  }
  getWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets a write stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the stream to get, in the form of
   *   `projects/{project_id}/datasets/{dataset_id}/tables/{table_id}/streams/{stream_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [WriteStream]{@link google.cloud.bigquery.storage.v1alpha2.WriteStream}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
          | protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IWriteStream,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.IGetWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getWriteStream(request, options, callback);
  }
  finalizeWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamResponse,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  finalizeWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamResponse,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Finalize a write stream so that no new data can be appended to the
   * stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the stream to finalize, in the form of
   *   `projects/{project_id}/datasets/{dataset_id}/tables/{table_id}/streams/{stream_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [FinalizeWriteStreamResponse]{@link google.cloud.bigquery.storage.v1alpha2.FinalizeWriteStreamResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  finalizeWriteStream(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamResponse,
          | protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamResponse,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamResponse,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.IFinalizeWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.finalizeWriteStream(request, options, callback);
  }
  batchCommitWriteStreams(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsResponse,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  batchCommitWriteStreams(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsResponse,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Atomically commits a group of `PENDING` streams that belong to the same
   * `parent` table.
   * Streams must be finalized before commit and cannot be committed multiple
   * times. Once a stream is committed, data in the stream becomes available
   * for read operations.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent table that all the streams should belong to, in the form of
   *   `projects/{project_id}/datasets/{dataset_id}/tables/{table_id}`.
   * @param {string[]} request.writeStreams
   *   Required. The group of streams that will be committed atomically.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCommitWriteStreamsResponse]{@link google.cloud.bigquery.storage.v1alpha2.BatchCommitWriteStreamsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  batchCommitWriteStreams(
    request: protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsResponse,
          | protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsResponse,
      | protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsResponse,
      (
        | protosTypes.google.cloud.bigquery.storage.v1alpha2.IBatchCommitWriteStreamsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.batchCommitWriteStreams(
      request,
      options,
      callback
    );
  }

  /**
   * Appends data to the given stream.
   *
   * If `offset` is specified, the `offset` is checked against the end of
   * stream. The server returns `OUT_OF_RANGE` in `AppendRowsResponse` if an
   * attempt is made to append to an offset beyond the current end of the stream
   * or `ALREADY_EXISTS` if user provids an `offset` that has already been
   * written to. User can retry with adjusted offset within the same RPC
   * stream. If `offset` is not specified, append happens at the end of the
   * stream.
   *
   * The response contains the offset at which the append happened. Responses
   * are received in the same order in which requests are sent. There will be
   * one response for each successful request. If the `offset` is not set in
   * response, it means append didn't happen due to some errors. If one request
   * fails, all the subsequent requests will also fail until a success request
   * is made again.
   *
   * If the stream is of `PENDING` type, data will only be available for read
   * operations after the stream is committed.
   *
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which is both readable and writable. It accepts objects
   *   representing [AppendRowsRequest]{@link google.cloud.bigquery.storage.v1alpha2.AppendRowsRequest} for write() method, and
   *   will emit objects representing [AppendRowsResponse]{@link google.cloud.bigquery.storage.v1alpha2.AppendRowsResponse} on 'data' event asynchronously.
   */
  appendRows(options?: gax.CallOptions): gax.CancellableStream {
    return this._innerApiCalls.appendRows(options);
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.bigQueryWriteStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
