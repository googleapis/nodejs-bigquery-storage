// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
} from 'google-gax';
import {PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha/metastore_partition_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './metastore_partition_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  BigQuery Metastore Partition Service API.
 *  This service is used for managing metastore partitions in BigQuery metastore.
 *  The service supports only batch operations for write.
 * @class
 * @memberof v1alpha
 */
export class MetastorePartitionServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  metastorePartitionServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of MetastorePartitionServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new MetastorePartitionServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof MetastorePartitionServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'bigquerystorage.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      readStreamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sessions/{session}/streams/{stream}'
      ),
      tablePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/datasets/{dataset}/tables/{table}'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      streamMetastorePartitions: new this._gaxModule.StreamDescriptor(
        this._gaxModule.StreamType.BIDI_STREAMING,
        !!opts.fallback,
        !!opts.gaxServerStreamingRetries
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.storage.v1alpha.MetastorePartitionService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.metastorePartitionServiceStub) {
      return this.metastorePartitionServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.storage.v1alpha.MetastorePartitionService.
    this.metastorePartitionServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.storage.v1alpha.MetastorePartitionService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.storage.v1alpha
            .MetastorePartitionService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const metastorePartitionServiceStubMethods = [
      'batchCreateMetastorePartitions',
      'batchDeleteMetastorePartitions',
      'batchUpdateMetastorePartitions',
      'listMetastorePartitions',
      'streamMetastorePartitions',
    ];
    for (const methodName of metastorePartitionServiceStubMethods) {
      const callPromise = this.metastorePartitionServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new PassThrough();
                setImmediate(() => {
                  stream.emit(
                    'error',
                    new this._gaxModule.GoogleError(
                      'The client has already been closed.'
                    )
                  );
                });
                return stream;
              }
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.stream[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.metastorePartitionServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'bigquerystorage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'bigquerystorage.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigquery',
      'https://www.googleapis.com/auth/cloud-platform',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Adds metastore partitions to a table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Reference to the table to where the metastore partitions to be
   *   added, in the format of
   *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   * @param {number[]} request.requests
   *   Required. Requests to add metastore partitions to the table.
   * @param {boolean} [request.skipExistingPartitions]
   *   Optional. Mimics the ifNotExists flag in IMetaStoreClient
   *   add_partitions(..). If the flag is set to false, the server will return
   *   ALREADY_EXISTS if any partition already exists. If the flag is set to true,
   *   the server will skip existing partitions and insert only the non-existing
   *   partitions.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsResponse|BatchCreateMetastorePartitionsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.batch_create_metastore_partitions.js</caption>
   * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_BatchCreateMetastorePartitions_async
   */
  batchCreateMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchCreateMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse,
          | protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateMetastorePartitions(
      request,
      options,
      callback
    );
  }
  /**
   * Deletes metastore partitions from a table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Reference to the table to which these metastore partitions
   *   belong, in the format of
   *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   * @param {number[]} request.partitionValues
   *   Required. The list of metastore partitions (identified by its values) to be
   *   deleted. A maximum of 100 partitions can be deleted in a batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.batch_delete_metastore_partitions.js</caption>
   * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_BatchDeleteMetastorePartitions_async
   */
  batchDeleteMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchDeleteMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchDeleteMetastorePartitions(
      request,
      options,
      callback
    );
  }
  /**
   * Updates metastore partitions in a table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Reference to the table to which these metastore partitions
   *   belong, in the format of
   *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   * @param {number[]} request.requests
   *   Required. Requests to update metastore partitions in the table.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsResponse|BatchUpdateMetastorePartitionsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.batch_update_metastore_partitions.js</caption>
   * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_BatchUpdateMetastorePartitions_async
   */
  batchUpdateMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchUpdateMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse,
          | protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchUpdateMetastorePartitions(
      request,
      options,
      callback
    );
  }
  /**
   * Gets metastore partitions from a table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Reference to the table to which these metastore partitions
   *   belong, in the format of
   *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   * @param {string} [request.filter]
   *   Optional. SQL text filtering statement, similar to a WHERE clause in a
   *   query. Only supports single-row expressions.  Aggregate functions are not
   *   supported.
   *
   *   Examples: "int_field > 5"
   *             "date_field = CAST('2014-9-27' as DATE)"
   *             "nullable_field is not NULL"
   *             "st_equals(geo_field, st_geofromtext("POINT(2, 2)"))"
   *             "numeric_field BETWEEN 1.0 AND 5.0"
   *   Restricted to a maximum length for 1 MB.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse|ListMetastorePartitionsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.list_metastore_partitions.js</caption>
   * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_ListMetastorePartitions_async
   */
  listMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  listMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listMetastorePartitions(
    request: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listMetastorePartitions(
    request?: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse,
          | protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse,
      | protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMetastorePartitions(
      request,
      options,
      callback
    );
  }

  /**
   * This is a bi-di streaming rpc method that allows the client to send
   * a stream of partitions and commit all of them atomically at the end.
   * If the commit is successful, the server will return a
   * response and close the stream. If the commit fails (due to duplicate
   * partitions or other reason), the server will close the stream with an
   * error. This method is only available via the gRPC API (not REST).
   *
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which is both readable and writable. It accepts objects
   *   representing {@link protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsRequest|StreamMetastorePartitionsRequest} for write() method, and
   *   will emit objects representing {@link protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse|StreamMetastorePartitionsResponse} on 'data' event asynchronously.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.stream_metastore_partitions.js</caption>
   * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_StreamMetastorePartitions_async
   */
  streamMetastorePartitions(options?: CallOptions): gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.streamMetastorePartitions(null, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified readStream resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} session
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  readStreamPath(
    project: string,
    location: string,
    session: string,
    stream: string
  ) {
    return this.pathTemplates.readStreamPathTemplate.render({
      project: project,
      location: location,
      session: session,
      stream: stream,
    });
  }

  /**
   * Parse the project from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .project;
  }

  /**
   * Parse the location from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .location;
  }

  /**
   * Parse the session from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .session;
  }

  /**
   * Parse the stream from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .stream;
  }

  /**
   * Return a fully-qualified table resource name string.
   *
   * @param {string} project
   * @param {string} dataset
   * @param {string} table
   * @returns {string} Resource name string.
   */
  tablePath(project: string, dataset: string, table: string) {
    return this.pathTemplates.tablePathTemplate.render({
      project: project,
      dataset: dataset,
      table: table,
    });
  }

  /**
   * Parse the project from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).project;
  }

  /**
   * Parse the dataset from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).dataset;
  }

  /**
   * Parse the table from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the table.
   */
  matchTableFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).table;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.metastorePartitionServiceStub && !this._terminated) {
      return this.metastorePartitionServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
