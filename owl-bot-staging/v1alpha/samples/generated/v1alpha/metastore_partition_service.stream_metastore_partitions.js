// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START bigquerystorage_v1alpha_generated_MetastorePartitionService_StreamMetastorePartitions_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Reference to the table to where the partition to be added, in the
   *  format of
   *  projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   */
  // const parent = 'abc123'
  /**
   *  Optional. A list of metastore partitions to be added to the table.
   */
  // const metastorePartitions = [1,2,3,4]
  /**
   *  Optional. Mimics the ifNotExists flag in IMetaStoreClient
   *  add_partitions(..). If the flag is set to false, the server will return
   *  ALREADY_EXISTS on commit if any partition already exists. If the flag is
   *  set to true:
   *   1) the server will skip existing partitions
   *   insert only the non-existing partitions as part of the commit.
   *   2) The client must set the `skip_existing_partitions` field to true for
   *   all requests in the stream.
   */
  // const skipExistingPartitions = true

  // Imports the Storage library
  const {MetastorePartitionServiceClient} = require('@google-cloud/storage').v1alpha;

  // Instantiates a client
  const storageClient = new MetastorePartitionServiceClient();

  async function callStreamMetastorePartitions() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const stream = await storageClient.streamMetastorePartitions();
    stream.on('data', (response) => { console.log(response) });
    stream.on('error', (err) => { throw(err) });
    stream.on('end', () => { /* API call completed */ });
    stream.write(request);
    stream.end();
  }

  callStreamMetastorePartitions();
  // [END bigquerystorage_v1alpha_generated_MetastorePartitionService_StreamMetastorePartitions_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
